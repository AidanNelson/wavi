{"version":3,"sources":["../../src/lib/graph.js"],"names":["require","Viz","utils","_","fs","module","exports","createDot","options","classes","relations","graph_settings","EXPERIMENTAL","USE_RANKING","dotResult","txt","cluster","current_cluster","sortedClasses","sortBy","each","classe","name","methods","method","push","unique","sort","properties","property","type","is_global","title","isUndefined","toUpperCase","propsep","length","methodsep","key","join","fill","rank","total_clusters","count","rk","index","ranking","relation","arrowstyle","relationship","from","to","generateGraph","e","console","log"],"mappings":"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","file":"graph.js","sourcesContent":["require(\"babel-polyfill\");\nvar Viz = require('./viz.js');\nvar utils = require('../utils/utils');\nvar _ = require('underscore')._;\n\n\nvar fs = require(\"fs\");\n\n\n\nmodule.exports = {\n\n        createDot: function (options, classes, relations) {\n\n                let graph_settings = \"\";\n                if (options.EXPERIMENTAL === true) {\n                        graph_settings = \"layout=fdp\";\n                }\n                else {\n                        //\n                        graph_settings = \"compound=true;\\n splines=true;\\n labeljust=left; rankdir=TB;\\n  overlap=false; \\n ranksep=0.1;  nodesep=0.1\";\n                }\n\n                var USE_RANKING = false;\n                let dotResult = [];\n\n                //\n                let txt = \"digraph G {\\n \"+graph_settings+\"  \\n \";\n                let cluster = 0;\n                let current_cluster = \"\";\n\n                var sortedClasses = _.sortBy(classes, 'cluster');\n\n                _.each(sortedClasses, function (classe) {\n\n                        if (current_cluster !== classe.cluster) {\n                                if (current_cluster !== \"\") {\n                                        txt += \"\\n } \\n\";\n                                }\n                                current_cluster = classe.cluster;\n                                txt += 'subgraph ' + classe.cluster + ' {\\n  style=\"filled\"; color=black;fillcolor=lightgray;fontsize=30;  label = \"' + classe.name + '\"; \\n color=lightgrey; \\n node[shape=record,style=filled,fillcolor=gray95] \\n';\n\n                                //shape=\"folder\";\n\n                                cluster++;\n                        }\n\n                        let methods = [];\n\n\n                        _.each(classe.methods, function (method) {\n                                methods.push(method + \"\\\\l\");\n                        });\n\n                        methods = _.unique(methods).sort();\n\n                        let properties = [];\n                        _.each(classe.properties, function (property) {\n                                properties.push(property + \"\\\\l\");\n                        });\n\n                        properties = _.unique(properties).sort();\n\n\n                        if (classe.type === \"css\") {\n\n                        }\n\n\n                        else if (classe.is_global === true) {\n                                classe.type = \"Global\";\n                                classe.name = \"\";\n                        }\n\n\n\n                        let title = \"\";\n                        if (!_.isUndefined(classe.type)) {\n                                title = \" \\«\" + classe.type.toUpperCase() + \"»\\\\n \"\n                        }\n                        title += classe.name;\n\n\n                        let propsep = \"\";\n                        if (properties.length > 0) {\n                                propsep = '|';\n                        }\n\n                        let methodsep = \"\";\n                        if (methods.length > 0) {\n                                methodsep = '|';\n                        }\n\n\n                        txt += classe.key + '[label = \"{' + title + propsep + properties.join(\"\") + methodsep + methods.join(\"\") + '}\", fillcolor=' + classe.fill + ']\\n ';\n                });\n\n                //*************************************** */\n\n                if (USE_RANKING) {\n                        let rank = []\n\n\n                        let total_clusters = cluster;\n                        //\n                        let count = 0;\n                        let rk = \"\";\n                        for (index = 0; index < total_clusters; ++index) {\n                                count++;\n                                rk += index + \" \";\n                                if (count === 3) {\n                                        count = 0;\n                                        rank.push(\"{rank=same \" + rk + \"}\");\n                                        rk = \"\";\n                                }\n\n\n                        }\n                        if (rk != \"\") {\n                                rank.push(\"{rank=same \" + rk + \"}\");\n                        }\n\n                        let ranking = rank.join(\" -> \") + \"[style=invis]\";\n\n\n                        txt += ranking;\n                }\n\n                //************************************************************* */\n                txt += \"\\n}\\n\"\n                _.each(relations, function (relation) {\n\n\n                        let arrowstyle = \"\";\n\n                        if (relation.relationship === \"composition\") {\n                                arrowstyle = \"arrowtail=diamond dir=back\";\n                        }\n\n                        if (relation.cluster === true) {\n                                txt += relation.from + \"->\" + relation.to + \" [ \" + arrowstyle + \"ltail=cluster_\" + relation.from + \",\" + \"lhead=cluster_\" + relation.to + \"] \\n\";\n                        }\n                        else {\n                                txt += relation.from + \"->\" + relation.to + \" [\" + arrowstyle + \"]   \\n\";\n                        }\n\n                });\n                txt += \"}\";\n\n                //utils.append('test.dot', txt);\n\n                return txt;\n\n        },\n        generateGraph: function (dotResult) {\n\n                try {\n                        return Viz(dotResult, \"svg\");\n\n                } catch (e) {\n                        console.log(e)\n                        return;\n                }\n\n        }\n\n}"]}