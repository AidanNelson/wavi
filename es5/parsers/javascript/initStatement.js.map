{"version":3,"sources":["../../../src/parsers/javascript/initStatement.js"],"names":["_","require","module","exports","parse","node","newNode","name","type","value","visibility","kind","id","init","group","rawType","right","callee","isUndefined","newExp","arguments","rawValue","each","args","push","length","join","params","toLowerCase"],"mappings":"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","file":"initStatement.js","sourcesContent":["var _ = require('underscore')._;\nmodule.exports = {\n\n        parse: function (node) {\n\n                var newNode = { name: \"\", type: \"\", value: \"\", visibility: \"-\", kind: \"property\" };\n\n\n\n                if (node.id.type === \"Identifier\") {\n                        newNode.name = node.id.name;\n                }\n                if (node.init !== null) {\n                        switch (node.init.type) {\n                                case \"FunctionExpression\":\n                                        newNode.group = \"js-function\";\n                                        break;\n                                case \"ObjectExpression\":\n                                        newNode.group = \"js-object\";\n                                        newNode.rawType = \"object\"\n                                        break;\n                                case \"MemberExpression\":\n                                        newNode.group = \"js-object\";\n                                        if (node.right && node.right.callee) {\n                                                if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"Array\") {\n                                                        newNode.group = \"js-array\";\n                                                        newNode.rawType = \"array\"\n                                                } else if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"String\") {\n                                                        newNode.group = \"js-variable\";\n                                                        newNode.rawType = \"string\"\n                                                } else if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"Number\") {\n                                                        newNode.group = \"js-variable\";\n                                                        newNode.rawType = \"number\"\n                                                } else if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"Boolean\") {\n                                                        newNode.group = \"js-variable\";\n                                                        newNode.rawType = \"boolean\"\n                                                }\n                                        }\n                                        break;\n                                case \"ArrayExpression\":\n                                        newNode.group = \"js-array\";\n                                        break;\n                                case \"NewExpression\":\n                                        newNode.group = \"js-function\";\n                                        newNode.name = node.name;\n                                        if (_.isUndefined(node.init.callee.name) || node.init.callee.name === null) {\n                                                newNode.group = \"unknown\"\n                                        }\n                                        newNode.newExp = node.init.callee.name;\n                                        if (node.init.callee.type === \"Identifier\" && node.init.callee.name === \"Array\") {\n                                                newNode.group = \"js-array\";\n                                                newNode.rawType = \"array\"\n                                        } else if (node.init.callee.type === \"Identifier\" && node.init.callee.name === \"String\") {\n                                                newNode.group = \"js-variable\";\n                                                newNode.rawType = \"string\"\n                                        } else if (node.init.callee.type === \"Identifier\" && node.init.callee.name === \"Number\") {\n                                                newNode.group = \"js-variable\";\n                                                newNode.rawType = \"number\"\n                                        } else if (node.init.callee.type === \"Identifier\" && node.init.callee.name === \"Boolean\") {\n                                                newNode.group = \"js-variable\";\n                                                newNode.rawType = \"boolean\"\n                                        }\n                                        break;\n                                case \"Literal\":\n                                        newNode.group = \"js-variable\";\n                                        newNode.rawType = typeof node.init.value;\n                                        if (node.init.value === null) {\n                                                newNode.rawType = \"null\"\n                                        }\n                                        if (typeof node.init.value === \"object\") {\n                                                // newNode.value = undefined\n                                        } else {\n                                                newNode.value = node.init.value\n                                        }\n                                        break;\n                                case \"Identifier\":\n                                        newNode.group = \"js-variable\";\n                                        newNode.value = node.init.name;\n                                        break;\n                                default:\n                                        newNode.group = \"js-variable\"\n                        }\n                }\n                if (node.init === null || _.isUndefined(node.init)) {\n                        newNode.value = \"undefined\"\n                } else if (!_.isUndefined(node.init.arguments)) {\n                        var rawValue = [];\n                        _.each(node.init.arguments, function (args) {\n                                if (!_.isUndefined(args.name) && args.name !== \"\") {\n                                        rawValue.push(args.name)\n                                } else if (!_.isUndefined(args.value) && args.value !== \"\") {\n                                        rawValue.push(args.value)\n                                }\n                        });\n                        if (rawValue.length > 0) {\n                                newNode.value = rawValue.join(\", \")\n                        } else {\n                                newNode.value = \"\"\n                        }\n                } else if (!_.isUndefined(node.init.params)) {\n                        var rawValue = [];\n                        _.each(node.init.params, function (args) {\n                                if (!_.isUndefined(args.name) && args.name !== \"\") {\n                                        rawValue.push(args.name)\n                                } else if (!_.isUndefined(args.value) && args.value !== \"\") {\n                                        rawValue.push(args.value)\n                                }\n                        });\n                        if (rawValue.length > 0) {\n                                newNode.value = rawValue.join(\", \")\n                        } else {\n                                newNode.value = \"\"\n                        }\n                }\n\n\n\n\n\n\n\n\n\n                if (newNode.group === \"js-variable\") {\n                        if (newNode.type === \"\") {\n                                newNode.type = \"variable\"\n                        }\n                }\n\n\n                if (newNode.group === \"js-object\") {\n                        newNode.type = \"object\";\n                }\n\n\n                if (newNode.group === \"js-array\") {\n                        newNode.type = \"array\"\n                }\n\n                if (newNode.group === \"js-function\") {\n                        newNode.kind = \"method\"\n\n                }\n\n\n                newNode.type = newNode.type.toLowerCase();\n\n\n                return newNode;\n\n\n\n\n\n\n\n\n\n\n        }\n\n\n\n}"]}