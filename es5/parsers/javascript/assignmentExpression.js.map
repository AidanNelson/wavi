{"version":3,"sources":["../../../src/parsers/javascript/assignmentExpression.js"],"names":["parsersHelper","require","_","module","exports","parse","node","newNode","name","type","value","visibility","kind","LeftName","RightName","left","getLeftName","object","tempName","split","shift","join","property","right","group","callee","isUndefined","alias","arguments","length","rawValue","each","argument","push","params","undefined","toLowerCase"],"mappings":"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","file":"assignmentExpression.js","sourcesContent":["var parsersHelper = require(\"../../utils/parsersHelper\");\nvar _ = require('underscore')._;\nmodule.exports = {\n\n        parse: function (node) {\n\n                var newNode = { name: \"\", type: \"\", value: \"\", visibility: \"-\", kind: \"property\" };\n\n                var LeftName = \"\";\n                var RightName = \"\";\n                if (node.left.type === \"MemberExpression\") {\n                        var LeftName = parsersHelper.getLeftName(node.left);\n                        if (node.left.object && node.left.object.type === \"Identifier\" && node.left.object.name === \"exports\") {\n                                var tempName = LeftName.split(\".\");\n                                tempName.shift();\n                                LeftName = tempName.join(\".\");\n                                newNode.visibility = \"+\"\n                        }\n                        if (node.left.object.type === \"Identifier\" && node.left.object.name === \"module\" && node.left.property.type === \"Identifier\" && node.left.property.name === \"exports\") {\n                                var tempName = LeftName.split(\".\");\n                                tempName.shift();\n                                newNode.type = \"module.exports\";\n                                newNode.visibility = \"+\"\n                        }\n                } else if (node.left.type === \"Identifier\") {\n                        var LeftName = node.left.name\n                }\n                if (node.right.type === \"Literal\") {\n                        newNode.group = \"js-variable\";\n                        if (node.right.value === null) {\n                                newNode.type = \"Null\"\n                        } else {\n                                newNode.type = typeof node.right.value\n                        }\n                        newNode.value = node.right.value\n                } else if (node.right.type === \"NewExpression\") {\n                        if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"Array\") {\n                                newNode.group = \"js-method-call\";\n                                newNode.type = \"Array\";\n                                if (_.isUndefined(node.right.callee.name) || node.right.callee.name === null) {\n                                        newNode.group = \"unknown\";\n                                        newNode.name = node.right.callee.name\n                                }\n                        } else if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"String\") {\n                                newNode.type = \"String\"\n                        } else if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"Number\") {\n                                newNode.type = \"Number\"\n                        } else if (node.right.callee.type === \"Identifier\" && node.right.callee.name === \"Boolean\") {\n                                newNode.type = \"Boolean\"\n                        }\n                } else if (node.right.type === \"BinaryExpression\") {\n                        newNode.group = \"js-variable\";\n                        newNode.type = \"BinaryExpression\"\n                } else if (node.right.type === \"MemberExpression\") {\n                        newNode.group = \"js-object\";\n                        RightName = parsersHelper.getLeftName(node.right);\n                        newNode.alias = RightName\n                } else if (node.right.type === \"Identifier\") {\n                        newNode.group = \"js-variable\";\n                        RightName = node.right.name;\n                        newNode.value = node.right.name;\n                        newNode.type = \"Identifier\";\n                        newNode.alias = RightName\n                } else if (node.right.type === \"CallExpression\" || node.right.type === \"NewExpression\") {\n                        newNode.group = \"js-function\";\n                        if (node.right.callee.type === \"MemberExpression\") {\n                                RightName = parsersHelper.getLeftName(node.right.callee);\n                                newNode.alias = RightName\n                        } else if (node.right.callee.type === \"Identifier\") {\n                                RightName = node.right.callee.name;\n                                newNode.alias = RightName\n                        }\n                }\n\n                newNode.name = LeftName;\n                if (!_.isUndefined(node.left.object) && node.left.object.type === \"ThisExpression\") {\n                        newNode.visibility = \"public\"\n                }\n                if (!_.isUndefined(node.right.arguments) && node.right.arguments.length > 0) {\n                        if (node.right.arguments.length === 1) {\n                                newNode.value = node.right.arguments[0].value\n                        } else {\n                                var rawValue = [];\n                                _.each(node.right.arguments, function (argument) {\n                                        if (!_.isUndefined(argument.name) && argument.name !== \"\") {\n                                                rawValue.push(argument.name)\n                                        } else if (!_.isUndefined(argument.value) && argument.value !== \"\") {\n                                                rawValue.push(argument.value)\n                                        }\n                                });\n                                if (rawValue !== \"\") {\n                                        newNode.value = rawValue.join(\", \")\n                                }\n                        }\n                }\n                if (!_.isUndefined(node.right.params)) {\n                        var rawValue = [];\n                        _.each(node.right.params, function (argument) {\n                                if (!_.isUndefined(argument.name) && argument.name !== \"\") {\n                                        rawValue.push(argument.name)\n                                } else if (!_.isUndefined(argument.value) && argument.value !== \"\") {\n                                        rawValue.push(argument.value)\n                                }\n                        });\n                        if (rawValue.length > 0) {\n                                newNode.value = rawValue.join(\", \")\n                        } else {\n                                newNode.value = \"\"\n                        }\n                }\n\n \n\n\n\n\n                if (newNode.group === \"js-variable\") {\n                        if (newNode.type === \"\") {\n                                newNode.type = \"variable\"\n                        }\n                }\n\n\n\n                if (newNode.group === \"js-object\") {\n                        newNode.type = \"object\"\n                        newNode.visibility = \"public\";\n                }\n\n\n                if (newNode.group === \"js-array\") {\n                        newNode.type = \"array\";\n                }\n\n                if (newNode.group === \"js-function\") {\n                        newNode.kind = \"method\";\n\n                        if (newNode.value === \"undefined\"){\n                                newNode.value = \"\";\n                        }\n\n                }\n\n                if (newNode.value === undefined){\n                        newNode.value = \"\";\n                }\n                \n\n                newNode.type = newNode.type.toLowerCase();\n\n\n                return newNode;\n        }\n\n}"]}