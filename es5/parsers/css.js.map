{"version":3,"sources":["../../src/parsers/css.js"],"names":["cssparse","require","parse","utils","db","async","_","path","instance","Css","file","Promise","resolve","reject","then","read_node","parse_css","find_css_elements","catch","console","log","error","result","data","ast","e","name","parent","each","stylesheet","rules","rule","cbVar","selectors","isUndefined","escapeHTML","join","value","declarations","length","classId","addClass","fill","cluster","addRelations","from","key","to","relationship","declaration","prop","addProperty","property","type","visibility","err","module","exports"],"mappings":"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","file":"css.js","sourcesContent":["var cssparse = require(\"css\").parse;\nvar utils = require(\"../utils/utils\");\nvar db = require(\"../lib/database\");\nvar async = require(\"async\");\nvar _ = require('underscore')._;\nvar path = require('path');\n\n\nlet instance = null;\n\nclass Css {\n        constructor() {\n                if (!instance) {\n                        instance = this;\n                }\n\n                return instance;\n        }\n\n\n        operation_css(file) {\n                return new Promise(\n                        function (resolve, reject) {\n                                Promise.resolve(file)\n                                        .then(utils.read_node)\n                                        .then(instance.parse_css)\n                                        .then(instance.find_css_elements)\n                                        .catch(error => { console.log(error); })\n                                        .then(function () {\n                                                resolve();\n                                        });\n\n                        });\n        }\n        parse_css(result) {\n                return new Promise(\n                        function (resolve, reject) {\n                                try {\n                                        let path = result[0];\n                                        let data = result[1];\n                                        let ast = cssparse(data);\n                                        resolve([path, ast]);\n                                } catch (e) {\n\n                                       \n                                        reject(\"File contain syntax error: \" + result[0].name);\n                                }\n                        });\n        }\n        find_css_elements(result) {\n                return new Promise(\n                        function (resolve, reject) {\n                                let parent = result[0];\n                                let ast = result[1];\n\n                                async.each(ast.stylesheet.rules, function (rule, cbVar) {\n                                        if (rule.selectors !== null && _.isUndefined(rule.selectors) == false) {\n                                                let name = utils.escapeHTML(rule.selectors.join(\" \"));\n                                                let value = rule.declarations.length + \" props\";\n\n\n                                                let classId = db.addClass({ name: name, fill: \"palegreen\", file: parent.name, cluster: parent.cluster });\n                                                db.addRelations({ from: parent.key, to: classId, relationship: \"composition\" });\n\n\n                                                _.each(rule.declarations, function (declaration) {\n                                                        let prop = db.addProperty(classId, { name: declaration.property, value: declaration.value, type: \"\", visibility: \"+\" });\n                                                })\n\n\n                                                cbVar();\n\n                                                /*async.each(rule.declarations, function (declaration, cbRule) {\n                                                    let prop = db.addProperty(classId, { name: declaration.property, value: declaration.value, type: \"\", visibility: \"+\" });\n                                                    cbRule();\n                                                }, function (err) {\n                                                    cbVar();\n                                                })*/\n\n                                        } else {\n                                                cbVar()\n                                        }\n                                }, function (err) {\n                                        resolve();\n                                })\n\n                        });\n        }\n\n\n}\n\nmodule.exports = new Css();\n"]}