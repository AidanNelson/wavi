{"version":3,"sources":["../src/index.js"],"names":["require","co","path","async","mkdirp","getDirName","dirname","fs","_","utils","css_parser","html_parser","javascript_parser","graph","db","instance","Wavi","options","website_folder","website_target","resolve","replace","console","log","identifiedFiles","WRITE_RESULTS_TO_JSON","WRITE_RESULTS_TO_DOT","startTimer","scanFiles","all_files","indentifyFiles","setIdentifiedFiles","js_files","pluck","where","getClasses","type","html_files","css_files","map","operation_css","operation_html","operation","dotResult","createDot","getRelations","writefile","JSON","stringify","unlinkSync","e","resultSvg","generateGraph","stopTimer","catch","onerror","err","error","stack","fileList","newList","Promise","reject","ids","each","item","color","slice","id","addClass","name","fill","cluster","is_global","push","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nrequire(\"babel-polyfill\");\n//NodeJS dependencies\nvar co = require('co');\nvar path = require('path');\nvar async = require(\"async\");\nvar mkdirp = require('mkdirp');\nvar getDirName = require('path').dirname;\nvar fs = require(\"fs\");\nvar _ = require('underscore')._;\n\n//Wavi local dependencies\nvar utils = require(\"./utils/utils\");\nvar css_parser = require(\"./parsers/css\");\nvar html_parser = require(\"./parsers/html\");\nvar javascript_parser = require(\"./parsers/javascript\");\nvar graph = require(\"./lib/graph\");\nvar db = require(\"./lib/database\");\n\n\n\nlet instance = null;\n\nclass Wavi {\n    constructor() {\n        if (!instance) {\n            instance = this;\n        }\n\n        return instance;\n    }\n\n\n    analyze(options, website_folder, website_target) {\n\n        website_folder = path.resolve(website_folder).replace(/\\\\/g, '\\/');\n        website_target = path.resolve(website_target).replace(/\\\\/g, '\\/');\n\n\n        console.log(\"Processing website: \" + website_folder);\n\n        var identifiedFiles;\n\n        var WRITE_RESULTS_TO_JSON = false;\n\n        var WRITE_RESULTS_TO_DOT = false;\n\n        co(function* () {\n\n            utils.startTimer();\n\n            let all_files = yield utils.scanFiles(website_folder, ['js', 'html', 'css']);\n\n            identifiedFiles = yield instance.indentifyFiles(all_files);\n\n            db.setIdentifiedFiles(identifiedFiles);\n\n            let js_files = _.pluck(_.where(db.getClasses(), { type: 'js' }), \"name\");\n\n            let html_files = _.where(db.getClasses(), { type: 'html' });\n\n            let css_files = _.where(db.getClasses(), { type: 'css' });\n\n            yield [css_files.map(css_parser.operation_css), html_files.map(html_parser.operation_html), js_files.map(javascript_parser.operation)];\n            let dotResult = graph.createDot(options, db.getClasses(), db.getRelations());\n\n            if (WRITE_RESULTS_TO_JSON === true) {\n                yield [utils.writefile(\"data.json\")(JSON.stringify(db.getClasses(), 0, 4)),\n                utils.writefile(\"relations.json\")(JSON.stringify(db.getRelations(), 0, 4))];\n            }\n\n            if (WRITE_RESULTS_TO_DOT === true) {\n                try {\n                    fs.unlinkSync(\"test.dot\");\n                } catch (e) { }\n\n            }\n            console.log(\"finished analyzing, now generating graph\")\n\n            let resultSvg = graph.generateGraph(dotResult);\n\n            yield utils.writefile(website_target)(resultSvg);\n\n            console.log(\"Graph generated: \" + website_target);\n\n            utils.stopTimer();\n        }).catch(instance.onerror);\n\n    }\n    onerror(err) {\n        console.error(err.stack);\n    }\n\n    indentifyFiles(fileList) {\n        var newList = [];\n        return new Promise((resolve, reject) => {\n            var ids = 0;\n            _.each(fileList, (item) => {\n\n\n\n                //item = utils.correctPathSync(item);\n\n                //item = path.normalize(item);\n\n                let color = \"lightyellow\";\n                let type = \"js\";\n                if (item.slice(-5) === \".html\") {\n                    color = \"lightsalmon\";\n                    type = \"html\";\n                }\n                if (item.slice(-4) === \".css\") {\n                    color = \"lightgreen\";\n                    type = \"css\";\n                }\n                let id = db.addClass({ name: item, fill: color, type, cluster: \"cluster_\" + ids, is_global: true });\n                newList.push({ name: item, id, cluster: \"cluster_\" + ids })\n                ids += 1;\n            });\n            resolve(newList);\n        });\n    }\n\n\n\n}\n\n/*\n\n\n\n*/\n\nmodule.exports = new Wavi();\n\n\n"]}